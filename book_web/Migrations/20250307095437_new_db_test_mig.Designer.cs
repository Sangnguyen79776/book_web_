// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using book_web.Data;

#nullable disable

namespace book_web.Migrations
{
    [DbContext(typeof(Book_webContext))]
    [Migration("20250307095437_new_db_test_mig")]
    partial class new_db_test_mig
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.11");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "admin-role",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "reader-role",
                            Name = "Reader",
                            NormalizedName = "READER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "admin-account",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "80d762da-441d-4018-bcea-1d1ad84a54c1",
                            Email = "admin@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEI4Fk8owLlJpOA3Z5VMuptgPqmMlIYQM+QPz7QgFZfwdBJAmZ07xS08yozSxyvoNiQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3cdb987c-ab9f-4877-981a-6d190ade2f37",
                            TwoFactorEnabled = false,
                            UserName = "admin@gmail.com"
                        },
                        new
                        {
                            Id = "reader-account",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0fc30b5e-a03b-4516-80a3-095bdb392819",
                            Email = "reader@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "READER@GMAIL.COM",
                            NormalizedUserName = "READER@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGR6JL8OrI+zbNPiG2CfeyqbpUI6PPGKX45kXWKqOADAxZjPMTEk0eAXRJzEBkNm9A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1d779355-1086-4d51-8171-6ad8bb135a01",
                            TwoFactorEnabled = false,
                            UserName = "reader@gmail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "admin-account",
                            RoleId = "admin-role"
                        },
                        new
                        {
                            UserId = "reader-account",
                            RoleId = "reader-role"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("book_web.Models.ActivityLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("AccessedAt")
                        .HasColumnType("TEXT");

                    b.Property<double>("DurationMs")
                        .HasColumnType("REAL");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ActivityLogs");
                });

            modelBuilder.Entity("book_web.Models.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("AuthorId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("BookId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DatePosted")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("BookId");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("book_web.Models.ArticleDetailsViewModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ArticleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.ToTable("ArticleDetailsViewModel");
                });

            modelBuilder.Entity("book_web.Models.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Biography")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("book_web.Models.Book", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("BookCover")
                        .HasColumnType("TEXT");

                    b.Property<double>("BookPrice")
                        .HasColumnType("REAL");

                    b.Property<string>("BookTitle")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("TEXT");

                    b.Property<int>("DislikeCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GenreId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsLimitedEdition")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("TEXT");

                    b.Property<int>("LikeCount")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("PublishedDate")
                        .HasColumnType("TEXT");

                    b.Property<double>("Rating")
                        .HasColumnType("REAL");

                    b.Property<int>("SalesCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("INTEGER");

                    b.HasKey("BookId");

                    b.HasIndex("GenreId");

                    b.ToTable("Book");

                    b.HasData(
                        new
                        {
                            BookId = 1,
                            Author = "Robert C. Martin",
                            BookCover = "https://images-na.ssl-images-amazon.com/images/I/51E2055ZGUL.jpg",
                            BookPrice = 12.34,
                            BookTitle = "Clean Code",
                            DateAdded = new DateTime(2024, 10, 7, 16, 54, 36, 535, DateTimeKind.Local).AddTicks(1006),
                            DislikeCount = 50,
                            GenreId = 1,
                            IsLimitedEdition = false,
                            LastUpdated = new DateTime(2025, 3, 7, 16, 54, 36, 535, DateTimeKind.Local).AddTicks(1035),
                            LikeCount = 210,
                            PublishedDate = new DateTime(2018, 3, 7, 16, 54, 36, 535, DateTimeKind.Local).AddTicks(1029),
                            Rating = 7.5999999999999996,
                            SalesCount = 50,
                            StockQuantity = 250
                        },
                        new
                        {
                            BookId = 2,
                            Author = "Corinne Sweet",
                            BookCover = "https://m.media-amazon.com/images/I/91nJdrcNBtL._AC_UF1000,1000_QL80_.jpg",
                            BookPrice = 9.9900000000000002,
                            BookTitle = "The Mindfulness Journal",
                            DateAdded = new DateTime(2024, 8, 7, 16, 54, 36, 535, DateTimeKind.Local).AddTicks(1037),
                            DislikeCount = 70,
                            GenreId = 2,
                            IsLimitedEdition = false,
                            LastUpdated = new DateTime(2025, 3, 7, 16, 54, 36, 535, DateTimeKind.Local).AddTicks(1039),
                            LikeCount = 650,
                            PublishedDate = new DateTime(2020, 3, 7, 16, 54, 36, 535, DateTimeKind.Local).AddTicks(1038),
                            Rating = 8.5999999999999996,
                            SalesCount = 50,
                            StockQuantity = 175
                        },
                        new
                        {
                            BookId = 3,
                            Author = "J.K.Rowling",
                            BookCover = "https://nhasachphuongnam.com/images/detailed/160/81YOuOGFCJL.jpg",
                            BookPrice = 6.7800000000000002,
                            BookTitle = "Harry Porter",
                            DateAdded = new DateTime(2024, 7, 7, 16, 54, 36, 535, DateTimeKind.Local).AddTicks(1041),
                            DislikeCount = 80,
                            GenreId = 3,
                            IsLimitedEdition = true,
                            LastUpdated = new DateTime(2025, 3, 7, 16, 54, 36, 535, DateTimeKind.Local).AddTicks(1042),
                            LikeCount = 1750,
                            PublishedDate = new DateTime(2019, 3, 7, 16, 54, 36, 535, DateTimeKind.Local).AddTicks(1041),
                            Rating = 9.5999999999999996,
                            SalesCount = 750,
                            StockQuantity = 35
                        },
                        new
                        {
                            BookId = 4,
                            Author = "Li Zheng",
                            BookCover = "https://th.bing.com/th/id/OIP.UdyFxJlC_TWtaYsqGMWwwQHaKc?w=196&h=276&c=7&r=0&o=5&dpr=1.1&pid=1.7",
                            BookPrice = 10.550000000000001,
                            BookTitle = "Programming with C++",
                            DateAdded = new DateTime(2025, 3, 5, 16, 54, 36, 535, DateTimeKind.Local).AddTicks(1044),
                            DislikeCount = 35,
                            GenreId = 1,
                            IsLimitedEdition = false,
                            LastUpdated = new DateTime(2025, 3, 7, 16, 54, 36, 535, DateTimeKind.Local).AddTicks(1049),
                            LikeCount = 500,
                            PublishedDate = new DateTime(2019, 3, 7, 16, 54, 36, 535, DateTimeKind.Local).AddTicks(1048),
                            Rating = 8.5999999999999996,
                            SalesCount = 685,
                            StockQuantity = 135
                        },
                        new
                        {
                            BookId = 5,
                            Author = "Karen Kingsbury",
                            BookCover = "https://th.bing.com/th/id/OIP.fWcVJEURX5e9M-29zpkaZQHaLR?w=196&h=299&c=7&r=0&o=5&dpr=1.1&pid=1.7",
                            BookPrice = 12.75,
                            BookTitle = "A novel about true love ",
                            DateAdded = new DateTime(2025, 3, 5, 16, 54, 36, 535, DateTimeKind.Local).AddTicks(1050),
                            DislikeCount = 20,
                            GenreId = 4,
                            IsLimitedEdition = false,
                            LastUpdated = new DateTime(2025, 3, 7, 16, 54, 36, 535, DateTimeKind.Local).AddTicks(1052),
                            LikeCount = 320,
                            PublishedDate = new DateTime(2022, 3, 7, 16, 54, 36, 535, DateTimeKind.Local).AddTicks(1051),
                            Rating = 9.0,
                            SalesCount = 1205,
                            StockQuantity = 50
                        });
                });

            modelBuilder.Entity("book_web.Models.BookClub", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("JoinInstructions")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("MeetingDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("BookClubs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "A club for fans of science fiction books.",
                            JoinInstructions = "Sign up on our website or visit our store.",
                            Location = "Bookstore, Downtown",
                            MeetingDate = new DateTime(2025, 3, 14, 16, 54, 36, 535, DateTimeKind.Local).AddTicks(1142),
                            Name = "Sci-Fi Book Club"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Join our mystery book club for thrilling discussions.",
                            JoinInstructions = "Register at the front desk.",
                            Location = "Library, Main Street",
                            MeetingDate = new DateTime(2025, 3, 21, 16, 54, 36, 535, DateTimeKind.Local).AddTicks(1146),
                            Name = "Mystery Book Club"
                        });
                });

            modelBuilder.Entity("book_web.Models.BookReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ArticleDetailsViewModelId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BookId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DatePosted")
                        .HasColumnType("TEXT");

                    b.Property<int>("Rating")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Reviewer")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ArticleDetailsViewModelId");

                    b.HasIndex("BookId");

                    b.ToTable("BookReviews");
                });

            modelBuilder.Entity("book_web.Models.BookStatisticViewModel", b =>
                {
                    b.Property<string>("Labels")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Sales")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Views")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.ToTable("BookStatisticViewModel");
                });

            modelBuilder.Entity("book_web.Models.BookStatistics", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BookId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<int>("Sales")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Views")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.ToTable("BookStatistics");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BookId = 1,
                            Date = new DateTime(2025, 3, 7, 16, 54, 36, 535, DateTimeKind.Local).AddTicks(1296),
                            Sales = 1200,
                            Views = 540
                        },
                        new
                        {
                            Id = 2,
                            BookId = 3,
                            Date = new DateTime(2025, 3, 7, 16, 54, 36, 535, DateTimeKind.Local).AddTicks(1297),
                            Sales = 985,
                            Views = 320
                        });
                });

            modelBuilder.Entity("book_web.Models.BookViewModel", b =>
                {
                    b.Property<int>("CurrentPage")
                        .HasColumnType("INTEGER");

                    b.Property<string>("GenreName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SearchString")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SortOrder")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TotalPages")
                        .HasColumnType("INTEGER");

                    b.ToTable("BookViewModel");
                });

            modelBuilder.Entity("book_web.Models.Cart", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("book_web.Models.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BookId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Price")
                        .HasColumnType("REAL");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("book_web.Models.ContactForm", b =>
                {
                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Yourname")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.ToTable("ContactForm");
                });

            modelBuilder.Entity("book_web.Models.ContactInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("MapEmbedCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Yourname")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ContactInformations");
                });

            modelBuilder.Entity("book_web.Models.Discount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("DiscountPercentage")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("MinimumAmountSpent")
                        .HasColumnType("TEXT");

                    b.Property<int>("MinimumNumberOfPeople")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Discount");
                });

            modelBuilder.Entity("book_web.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2025, 3, 17, 16, 54, 36, 535, DateTimeKind.Local).AddTicks(1107),
                            Description = "Join us for a book signing with Author XYZ.",
                            ImageUrl = "https://th.bing.com/th/id/OIP.bRWnWBnpkJYKbgtPYIIdawHaE5?w=261&h=180&c=7&r=0&o=5&dpr=1.1&pid=1.7",
                            Location = "Bookstore, Downtown",
                            Title = "Book Signing with Author XYZ"
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateTime(2025, 4, 6, 16, 54, 36, 535, DateTimeKind.Local).AddTicks(1110),
                            Description = "A workshop for aspiring writers.",
                            ImageUrl = "https://th.bing.com/th/id/OIP.wT9mRKIUU-dlHXh0SmCuCwHaGN?w=940&h=788&rs=1&pid=ImgDetMain",
                            Location = "Community Center",
                            Title = "Writing Workshop"
                        });
                });

            modelBuilder.Entity("book_web.Models.FAQ", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("FAQs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Answer = "You can order through our website...",
                            Question = "How do I order?"
                        },
                        new
                        {
                            Id = 2,
                            Answer = "We accept returns within 30 days...",
                            Question = "What is your return policy?"
                        });
                });

            modelBuilder.Entity("book_web.Models.Genre", b =>
                {
                    b.Property<int>("GenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("GenreName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.HasKey("GenreId");

                    b.ToTable("Genre");

                    b.HasData(
                        new
                        {
                            GenreId = 1,
                            GenreName = "Programming"
                        },
                        new
                        {
                            GenreId = 2,
                            GenreName = "Self-help"
                        },
                        new
                        {
                            GenreId = 3,
                            GenreName = "Novel"
                        },
                        new
                        {
                            GenreId = 4,
                            GenreName = "Love Story"
                        });
                });

            modelBuilder.Entity("book_web.Models.History", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Histories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "Founded in 2020, Bookstore XYZ was created with the mission of providing a curated selection of books for avid readers. Our bookstore values community, education, and the love of reading.",
                            Title = "Our Story"
                        });
                });

            modelBuilder.Entity("book_web.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ShippingAddress")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("TotalAmount")
                        .HasColumnType("REAL");

                    b.HasKey("OrderId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("book_web.Models.OrderItem", b =>
                {
                    b.Property<int>("OrderItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BookId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("OrderId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Price")
                        .HasColumnType("REAL");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.HasKey("OrderItemId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("book_web.Models.Staff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BookId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Picks")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.ToTable("Staff");
                });

            modelBuilder.Entity("book_web.Models.TeamMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("TeamMembers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Bio = "John has always had a passion for literature and decided to create Bookstore XYZ to share that passion with the world.",
                            ImageUrl = "https://th.bing.com/th/id/OIP.61h_9hNpt0FeK2Sig6aQ6wAAAA?w=123&h=183&c=7&r=0&o=5&dpr=1.1&pid=1.7",
                            Name = "John Doe",
                            Role = "Founder"
                        },
                        new
                        {
                            Id = 2,
                            Bio = "Jane manages the daily operations of the bookstore and ensures that customers have the best experience possible.",
                            ImageUrl = "https://th.bing.com/th/id/OIP.xZNh-qFJhf2VICTsPuDf4wHaKj?w=152&h=217&c=7&r=0&o=5&dpr=1.1&pid=1.7",
                            Name = "Jane Smith",
                            Role = "Manager"
                        });
                });

            modelBuilder.Entity("book_web.Models.UserBookReaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BookId")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("Liked")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("UserBookReactions");
                });

            modelBuilder.Entity("book_web.Models.UserViewModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Roles")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("UserViewModel");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("book_web.Models.Article", b =>
                {
                    b.HasOne("book_web.Models.Author", null)
                        .WithMany("Articles")
                        .HasForeignKey("AuthorId");

                    b.HasOne("book_web.Models.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("book_web.Models.ArticleDetailsViewModel", b =>
                {
                    b.HasOne("book_web.Models.Article", "Article")
                        .WithMany()
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");
                });

            modelBuilder.Entity("book_web.Models.Book", b =>
                {
                    b.HasOne("book_web.Models.Genre", "Genre")
                        .WithMany("Books")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("book_web.Models.BookReview", b =>
                {
                    b.HasOne("book_web.Models.ArticleDetailsViewModel", null)
                        .WithMany("Reviews")
                        .HasForeignKey("ArticleDetailsViewModelId");

                    b.HasOne("book_web.Models.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("book_web.Models.BookStatistics", b =>
                {
                    b.HasOne("book_web.Models.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("book_web.Models.CartItem", b =>
                {
                    b.HasOne("book_web.Models.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("book_web.Models.OrderItem", b =>
                {
                    b.HasOne("book_web.Models.Order", null)
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId");
                });

            modelBuilder.Entity("book_web.Models.Staff", b =>
                {
                    b.HasOne("book_web.Models.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("book_web.Models.UserBookReaction", b =>
                {
                    b.HasOne("book_web.Models.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("book_web.Models.ArticleDetailsViewModel", b =>
                {
                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("book_web.Models.Author", b =>
                {
                    b.Navigation("Articles");
                });

            modelBuilder.Entity("book_web.Models.Genre", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("book_web.Models.Order", b =>
                {
                    b.Navigation("OrderItems");
                });
#pragma warning restore 612, 618
        }
    }
}
